{"version":3,"file":"static/js/60.42ee706b.chunk.js","mappings":"4QAEaA,EAAYC,EAAAA,EAAAA,KAAH,oEAKTC,EAAWD,EAAAA,EAAAA,MAAH,4GAORE,EAAQF,EAAAA,EAAAA,MAAH,sRAeLG,EAASH,EAAAA,EAAAA,OAAH,+f,oLC3BNI,EAAcJ,EAAAA,EAAAA,IAAH,qDAIXK,EAAOL,EAAAA,EAAAA,GAAH,sFAMJM,EAAWN,EAAAA,EAAAA,GAAH,4PAYRO,EAAaP,EAAAA,EAAAA,OAAH,iOAeVQ,EAAYR,EAAAA,EAAAA,OAAH,gS,mECrCTS,E,OAAOT,EAAAA,IAAH,mZ,SCAJU,EAAU,WACrB,OAAO,SAACD,EAAD,M,4JCMF,SAASE,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAoCC,EAAAA,EAAAA,MAApC,eAAOC,EAAP,KAAqBC,EAArB,KAAqBA,UACPC,GAAaC,EAAAA,EAAAA,MAAnBC,KACR,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KAqCMC,EAAQ,WACZH,EAAQ,IACRE,EAAS,KAGLE,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBP,EAAR,EAAQA,KAAMQ,EAAd,EAAcA,MAEd,OAAQR,GACN,IAAK,OACHC,EAAQO,GACR,MAEF,IAAK,QACHL,EAASK,GACT,MAEF,QACE,SAIN,OACE,iCACE,SAAC,KAAD,CAAWC,KAAK,SAASC,QAAS,kBAAMnB,EAAS,MAAjD,UACE,SAAC,MAAD,CAAaoB,KAAK,WAEpB,UAAC,KAAD,CAAWC,SAhDM,SAAAN,GACnBA,EAAEO,iBAEF,IAAMC,EAAa,CACjBd,KAAAA,EACAE,MAAAA,IAnBc,SAAAF,GAChB,OAAOJ,EAASmB,MACd,SAAAC,GAAO,OAAIA,EAAQhB,KAAKiB,gBAAkBjB,EAAKiB,iBAoB7CC,CAAUlB,IAhBI,SAAAE,GAClB,OAAON,EAASmB,MAAK,SAAAC,GAAO,OAAIA,EAAQd,QAAUA,KAiBvCiB,CAAYjB,IAdX,SAACF,EAAME,GACnB,MAAuB,KAAhBF,EAAKoB,QAAkC,KAAjBlB,EAAMkB,OAexBC,CAAMrB,EAAME,IAGrBR,EAAWoB,GACXQ,EAAAA,GAAAA,QAAA,UAAiBtB,EAAjB,YAAyBE,EAAzB,0BAHAoB,EAAAA,GAAAA,MAAY,2DAFZA,EAAAA,EAAAA,IAAM,gBAAD,OAAOpB,EAAP,kCAFLoB,EAAAA,EAAAA,IAAM,gBAAD,OAAOtB,EAAP,iCASPI,KA8BE,WACE,UAAC,KAAD,mBAEE,SAAC,KAAD,CACEK,KAAK,OACLT,KAAK,OACLQ,MAAOR,EACPuB,SAAUlB,EACVmB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,UAAC,KAAD,qBAEE,SAAC,KAAD,CACEjB,KAAK,MACLT,KAAK,QACLQ,MAAON,EACPqB,SAAUlB,EACVmB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,SAAC,KAAD,CAAQjB,KAAK,SAASkB,SAAUhC,EAAhC,SACGA,GAAY,SAACN,EAAA,EAAD,IAAc,sBCtGtB,SAASuC,IACtB,OAAO,SAACtC,EAAD","sources":["components/ContactForm/ContactForm.styled.js","components/ContactList/ContactList.styled.js","components/Spinner/Spinner.styled.js","components/Spinner/Spinner.jsx","components/ContactForm/ContactForm.jsx","pages/Form.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.form`\n  margin-bottom: 30px;\n  margin-top: 5px;\n`;\n\nexport const TextName = styled.label`\n  display: block;\n  margin-bottom: 20px;\n  font-weight: 500;\n  font-size: 20px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  margin-right: auto;\n  margin-left: auto;\n  padding: 5px;\n  width: 350px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 15px;\n  :focus {\n    outline-color: blueviolet;\n  }\n`;\n\nexport const Button = styled.button`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  padding: 10px 20px;\n  width: 170px;\n  height: 45px;\n  background-color: teal;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  opacity: 0.8;\n  transition: opacity 250ms var(--timingFn);\n  cursor: pointer;\n  color: #fff;\n  font-weight: 700;\n  font-size: 16px;\n  text-transform: uppercase;\n  :hover {\n    background-color: #bc9428;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const SectionList = styled.div`\n  /* position: relative; */\n`;\n\nexport const List = styled.ul`\n  margin-top: 30px;\n  font-weight: 500;\n  font-size: 18px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n  border-radius: 4px;\n  background-color: lightgray;\n  padding: 10px;\n  :not(:last-child) {\n    margin-bottom: 5px;\n  }\n`;\n\nexport const ButtonList = styled.button`\n  /* width: 60px; */\n  height: auto;\n  cursor: pointer;\n  border: none;\n  background: transparent;\n  padding: 0;\n  svg {\n    vertical-align: middle;\n    :hover {\n      fill: red;\n    }\n  }\n`;\n\nexport const AddButton = styled.button`\n  display: block;\n  position: absolute;\n  top: 0;\n  right: 0;\n  border: none;\n  background-color: transparent;\n  margin-top: 10px;\n  margin-right: 10px;\n  cursor: pointer;\n  :hover {\n    color: orange;\n  }\n\n  svg {\n    vertical-align: middle;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const Spin = styled.div`\n  display: flex;\n  border: 3px solid #f3f3f3;\n  border-top: 3px solid orange;\n  border-radius: 50%;\n  width: 1em;\n  height: 1em;\n  animation: spin 2s linear infinite;\n  align-items: center;\n  text-align: center;\n  justify-content: center;\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","import { Spin } from './Spinner.styled';\n\nexport const Spinner = () => {\n  return <Spin></Spin>;\n};\n","import { Container, TextName, Input, Button } from './ContactForm.styled';\nimport toast from 'react-hot-toast';\nimport { useAddContactMutation, useGetContactsQuery } from 'redux/contacts';\nimport { useNavigate } from 'react-router-dom';\nimport { AddButton } from 'components/ContactList/ContactList.styled';\nimport { TiArrowBack } from 'react-icons/ti';\nimport { useState } from 'react';\nimport { Spinner } from 'components/Spinner/Spinner';\n\nexport function ContactForm() {\n  const navigate = useNavigate();\n  const [addContact, { isLoading }] = useAddContactMutation();\n  const { data: contacts } = useGetContactsQuery();\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const checkName = name => {\n    return contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n  };\n\n  const checkNumber = phone => {\n    return contacts.find(contact => contact.phone === phone);\n  };\n\n  const Error = (name, phone) => {\n    return name.trim() === '' || phone.trim() === '';\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const newContact = {\n      name,\n      phone,\n    };\n\n    if (checkName(name)) {\n      toast(`🤔 ${name} is already in the contacts!`);\n    } else if (checkNumber(phone)) {\n      toast(`🤔 ${phone} is already in the contacts!`);\n    } else if (Error(name, phone)) {\n      toast.error('😱 Enter the contacts name and number phone!');\n    } else {\n      addContact(newContact);\n      toast.success(`${name} ${phone} added successfully!`);\n    }\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setPhone('');\n  };\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'phone':\n        setPhone(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  return (\n    <>\n      <AddButton type=\"button\" onClick={() => navigate('/')}>\n        <TiArrowBack size=\"2em\" />\n      </AddButton>\n      <Container onSubmit={handleSubmit}>\n        <TextName>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </TextName>\n        <TextName>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"phone\"\n            value={phone}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </TextName>\n        <Button type=\"submit\" disabled={isLoading}>\n          {isLoading ? <Spinner /> : 'Add contact'}\n        </Button>\n      </Container>\n    </>\n  );\n}\n","import { ContactForm } from 'components/ContactForm/ContactForm';\n\nexport default function Form() {\n  return <ContactForm />;\n}\n"],"names":["Container","styled","TextName","Input","Button","SectionList","List","ListItem","ButtonList","AddButton","Spin","Spinner","ContactForm","navigate","useNavigate","useAddContactMutation","addContact","isLoading","contacts","useGetContactsQuery","data","useState","name","setName","phone","setPhone","reset","handleChange","e","target","value","type","onClick","size","onSubmit","preventDefault","newContact","find","contact","toLowerCase","checkName","checkNumber","trim","Error","toast","onChange","pattern","title","required","disabled","Form"],"sourceRoot":""}